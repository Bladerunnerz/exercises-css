---

name: Приоритет стилей
theory: |
  Говоря о каскадности, возникает вопрос: «А что будет, если в разных источниках стили будут одинаковые правила, но с разными значениями?». В таком случае есть правила, определяющие приоритеты стилей из разных источников. По степени важности список выглядит следующим образом:

  * Стили в атрибуте тега
  * Стили в отдельном файле
  * Стили по умолчанию, которые добавляет браузер

  Если в одном из источников дублируются правила, то применятся те, которые были указаны последними.

  ```css
  .blue {
    color: blue;
  }

  .blue {
    color: red;
  }

  /* В данном случае текст в блоках с классом .blue будет красным, так как будет использовано последнее указанное правило */
  ```

  У селекторов также существуют приоритеты. Для того, чтобы понять приоритеты, используется таблица, где каждому селектору даётся «вес»:

  * Селектор по тегу: **1**
  * Селектор по классу: **10**
  * Селектор по ID: **100**
  * Стиль в атрибуте тега: **1000**

  ```html
  <style>
    .blue {
      color: blue;
    }

    #red-block {
      color: red;
    }
  </style>

  <div class="blue" id="red-block" style="color: white;">Текст</div>
  ```

  Какого цвета будет текст внутри блока? Воспользуемся таблицей выше, по которой видно, что селектор по классу (`.blue`) имеет приоритет 10, а приоритет селектора по id (`#red-block`) имеет приоритет 100. Значит правило для id `#red-block` «перебьёт» правило для класса `.blue`. Помимо этого у нас есть инлайн стиль `style="color: white;"`, который имеет приоритет `1000`, а это значит, что он имеет наивысший приоритет.

  Таким образом цвет текста внутри блока будет **белый**.

instructions: |
  Добавьте в редактор `p` с классом `border` и id `no-border`. Установите следующие правила:
  * Для класса `border` установите сплошную рамку любого цвета.
  * Для id `no-border` отмените рамку. Используйте значение `none` у правила `border-style`
